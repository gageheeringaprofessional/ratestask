import requests

url = 'http://127.0.0.1:5000/api/v1/average'
params = '?origin={}&destination={}&date_from={}&date_to={}'


'''
Reference: slug hierarchy generated by update_cache_direct_subslugs()
in api.py given initial data:

None:['china_main', 'northern_europe']
scandinavia:['stockholm_area', 'kattegat', 'norway_north_west', 'norway_south_east', 'norway_south_west']
north_europe_sub:['uk_sub']
baltic:['finland_main', 'baltic_main', 'poland_main']
north_europe_main:['uk_main']
northern_europe:['russia_north_west', 'north_europe_main', 'north_europe_sub', 'baltic', 'scandinavia']
china_main:['china_east_main', 'china_south_main', 'china_north_main']

'''

################################################################################
#
# (origin, destination) = (code, code)
#
################################################################################

# Check averages
def test_CNGGZ_to_EETLL():
    request = url + params.format('CNGGZ', 'EETLL', '2016-01-01', '2016-01-31')
    response = requests.get(request)
    body = response.json()

    # Average price between origin and destination on 2016-01-01
    average = int(body[0]['average_price'])
    assert average == 1154

    # 2016-01-15
    average = int(body[14]['average_price'])
    assert average == 1155

    # 2016-01-24
    average = int(body[23]['average_price'])
    assert average == 1154

    '''
    Verify manually:
    '''
    query = """
        SELECT *
        FROM prices
        WHERE orig_code = 'CNGGZ'
        AND dest_code = 'EETLL'
        AND (
            day = '2016-01-01'::DATE
            OR day = '2016-01-15'::DATE
            OR day = '2016-01-24'::DATE 
        )
        ORDER BY day, orig_code
        ;
    """

# Edge case: date_to is before date_from
def test_CNGGZ_to_EETLL_invalid_date_range():
    request = url + params.format('CNGGZ', 'EETLL', '2016-02-01', '2016-01-31')
    response = requests.get(request)
    body = response.json()

    assert len(body) == 0

# Edge case: invalid date format provided
def test_CNGGZ_to_EETLL_invalid_date_format():
    request = url + params.format('CNGGZ', 'EETLL', '2016-001', '2016-01-31')
    response = requests.get(request)
    body = response.json()

    assert response.status_code == 400
    assert body['error'] == 'Improper date format provided, use YYYY-MM-DD'

# Edge case: missing parameters
def test_CNGGZ_to_EETLL_param_missing():
    request = url + '?origin={}&destination={}'.format('CNGGZ', 'EETLL')
    response = requests.get(request)
    body = response.json()

    assert response.status_code == 400
    assert body['error'] == 'Required parameter is missing or empty'

# Edge case: fewer than 3 transactions on day, so null average
def test_CNQIN_to_NOFRO_null_average():
    request = url + params.format('CNQIN', 'NOFRO', '2016-01-01', '2016-01-31')
    response = requests.get(request)
    body = response.json()

    # 2016-01-01
    assert body[0]['average_price'] is None

    '''
    Verify manually:
    '''
    query = """
        SELECT *
        FROM prices
        WHERE orig_code = 'CNQIN'
        AND dest_code = 'NOFRO'
        ORDER BY day, orig_code
        ;
    """

################################################################################
#
# (origin, destination) = (code, slug)
#
################################################################################

# Check averages
def test_CNCWN_to_baltic():
    request = url + params.format('CNCWN', 'baltic', '2016-01-01', '2016-01-31')
    response = requests.get(request)
    body = response.json()

    # 2016-01-01
    average = int(body[0]['average_price'])
    assert average == 1264

    '''
    Verify manually:
    '''
    query = """
        SELECT AVG(price)
        FROM prices
        WHERE orig_code = 'CNCWN'
        AND dest_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug IN ('baltic', 'finland_main', 'baltic_main', 'poland_main')
        )
        AND day = '2016-01-01'::DATE
        ;
    """

    # 2016-01-24
    average = int(body[23]['average_price'])
    assert average == 1121

    '''
    Verify manually:
    '''
    query = """
        SELECT AVG(price)
        FROM prices
        WHERE orig_code = 'CNCWN'
        AND dest_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug IN ('baltic', 'finland_main', 'baltic_main', 'poland_main')
        )
        AND day = '2016-01-24'::DATE
        ;
    """

    # 2016-01-31
    average = int(body[30]['average_price'])
    assert average == 1053

    '''
    Verify manually:
    '''
    query = """
        SELECT AVG(price)
        FROM prices
        WHERE orig_code = 'CNCWN'
        AND dest_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug IN ('baltic', 'finland_main', 'baltic_main', 'poland_main')
        )
        AND day = '2016-01-31'::DATE
        ;
    """

# Check averages
def test_CNQIN_to_scandinavia():
    request = url + params.format('CNQIN', 'scandinavia', '2016-01-01', '2016-01-31')
    response = requests.get(request)
    body = response.json()

    # 2016-01-03
    average = int(body[2]['average_price'])
    assert average == 1712

    '''
    Verify manually:
    '''
    query = """
        SELECT AVG(price)
        FROM prices
        WHERE orig_code = 'CNQIN'
        AND dest_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug IN ('scandinavia', 'stockholm_area', 'kattegat', 'norway_north_west', 'norway_south_east', 'norway_south_west')
        )
        AND day = '2016-01-03'::DATE
        ;
    """

# Edge case: slug does not exist
def test_CNQIN_to_scandinavialand():
    request = url + params.format('CNQIN', 'scandinavialand', '2016-01-01', '2016-01-31')
    response = requests.get(request)
    body = response.json()

    assert body['error'] == 'Non-existent code or slug provided'

# Edge case: code does not exist
def test_XXXXX_to_scandinavia():
    request = url + params.format('XXXXX', 'scandinavia', '2016-01-01', '2016-01-31')
    response = requests.get(request)
    body = response.json()

    assert body['error'] == 'Non-existent code or slug provided'

################################################################################
#
# (origin, destination) = (slug, code)
#
################################################################################

# Edge case: no transactions occurred
def test_china_east_main_to_CNGGZ():
    request = url + params.format('china_east_main', 'CNGGZ', '2016-01-01', '2016-01-31')
    response = requests.get(request)
    body = response.json()

    assert len(body) == 0

    '''
    Verify manually:

    Note: china_east_main has no subslugs
    '''
    query = """
        SELECT *
        FROM prices
        WHERE orig_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug IN ('china_east_main')
        )
        AND dest_code = 'CNGGZ'
        AND day BETWEEN '2016-01-01'::DATE AND '2016-01-31'::DATE
        ;
    """

# Edge case: parameter missing
def test_china_east_main_to_CNGGZ_param_missing():
    request = url + '?origin={}&destination={}&date_from={}'.format('china_east_main', 'CNGGZ', '2016-01-31')
    response = requests.get(request)
    body = response.json()

    assert response.status_code == 400
    assert body['error'] == 'Required parameter is missing or empty'

################################################################################
#
# (origin, destination) = (slug, slug)
#
################################################################################

# Check averages
def test_china_main_to_baltic():
    request = url + params.format('china_main', 'baltic', '2016-01-01', '2016-01-31')
    response = requests.get(request)
    body = response.json()

    # 2016-01-01
    average = int(body[0]['average_price'])
    assert average == 1361

    '''
    Verify manually:
    '''
    query = """
        SELECT AVG(price)
        FROM prices
        WHERE orig_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug IN ('china_main', 'china_north_main', 'china_east_main', 'china_south_main')
        )
        AND dest_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug IN ('baltic', 'finland_main', 'baltic_main', 'poland_main')
        )
        AND day = '2016-01-01'::DATE
        ;
    """

    # 2016-01-31
    average = int(body[30]['average_price'])
    assert average == 1145

    '''
    Verify manually:
    '''
    query = """
        SELECT AVG(price)
        FROM prices
        WHERE orig_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug IN ('china_main', 'china_north_main', 'china_east_main', 'china_south_main')
        )
        AND dest_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug IN ('baltic', 'finland_main', 'baltic_main', 'poland_main')
        )
        AND day = '2016-01-31'::DATE
        ;
    """

# Check averages
def test_china_main_to_northern_europe():
    request = url + params.format('china_main', 'northern_europe', '2016-01-01', '2016-01-31')
    response = requests.get(request)
    body = response.json()

    # 2016-01-01
    average = int(body[0]['average_price'])
    assert average == 1462

    '''
    Verify manually:
    '''
    query = """
        SELECT AVG(price)
        FROM prices
        WHERE orig_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug IN ('china_main', 'china_north_main', 'china_east_main', 'china_south_main')
        )
        AND dest_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug IN ('uk_main', 'northern_europe', 'poland_main', 'uk_sub',
                'stockholm_area', 'finland_main', 'norway_south_east', 'baltic_main', 'kattegat',
                'russia_north_west', 'scandinavia', 'north_europe_main', 'baltic',
                'norway_north_west', 'norway_south_west', 'north_europe_sub')
        )
        AND day = '2016-01-01'::DATE
        ;
    """ 

    # 2016-01-31
    average = int(body[30]['average_price'])
    assert average == 1114

    '''
    Verify manually:
    '''
    query = """
        SELECT AVG(price)
        FROM prices
        WHERE orig_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug IN ('china_main', 'china_north_main', 'china_east_main', 'china_south_main')
        )
        AND dest_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug IN ('uk_main', 'northern_europe', 'poland_main', 'uk_sub',
                'stockholm_area', 'finland_main', 'norway_south_east', 'baltic_main', 'kattegat',
                'russia_north_west', 'scandinavia', 'north_europe_main', 'baltic',
                'norway_north_west', 'norway_south_west', 'north_europe_sub')
        )
        AND day = '2016-01-31'::DATE
        ;
    """ 

# Check averages before and after modifying data
def test_china_north_main_to_uk_main():
    request = url + params.format('china_north_main', 'uk_main', '2016-01-01', '2016-01-31')
    response = requests.get(request)
    body = response.json()

    # There are 12 transactions on 2016-01-01 with an average of 1204
    average = int(body[0]['average_price'])
    assert average == 1204

    '''
    Verify manually:

    Note: neither 'china_north_main' nor 'uk_main' have any subslugs
    '''
    query = """
        SELECT *
        FROM prices
        WHERE orig_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug = 'china_north_main'
        )
        AND dest_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug = 'uk_main'
        )
        AND day = '2016-01-01'::DATE
        ;
    """

# Edge case: origin is destination (no transactions occurred)
def test_uk_sub_to_uk_sub():
    request = url + params.format('uk_sub', 'uk_sub', '2016-01-01', '2016-01-31')
    response = requests.get(request)
    body = response.json()

    assert len(body) == 0

    '''
    Verify manually:
    '''
    query = """
        SELECT *
        FROM prices
        WHERE orig_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug = 'uk_sub'
        )
        AND dest_code IN (
            SELECT code
            FROM ports
            WHERE parent_slug = 'uk_sub'
        )
        ORDER BY day, orig_code
        ;
    """
